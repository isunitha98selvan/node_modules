var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import isEqual from "lodash-es/isEqual";
var configuration = {
    assert: defaultAssert,
    assertDeepEqual: defaultAssertDeepEqual,
    frameworkMatcher: false
};
export function configure(options) {
    configuration = __assign({}, options);
}
export function get(key) {
    return configuration[key];
}
function defaultAssert(value, message) {
    if (value) {
        return;
    }
    throw new Error(message);
}
function defaultAssertDeepEqual(a, b) {
    if (isEqual(a, b)) {
        return;
    }
    throw new Error("Expected " + toString(a) + " to equal " + toString(b) + ".");
}
function toString(value) {
    if (value === null) {
        return "null";
    }
    else if (value === undefined) {
        return "undefined";
    }
    return value.toString();
}
