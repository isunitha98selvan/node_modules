import { Observable } from "rxjs/Observable";
import { IScheduler } from "rxjs/Scheduler";
import { ColdObservable } from "rxjs/testing/ColdObservable";
import { HotObservable } from "rxjs/testing/HotObservable";
import { TestScheduler } from "rxjs/testing/TestScheduler";
import { configure } from "./configuration";
import { Expect } from "./expect";
export declare class Context {
    readonly scheduler: TestScheduler;
    autoFlush: boolean;
    configure: typeof configure;
    private bindings_;
    constructor(scheduler: TestScheduler);
    bind(...schedulers: IScheduler[]): void;
    cold<T = any>(marbles: string, values?: {
        [key: string]: T;
    }, error?: any): ColdObservable<T>;
    equal<T = any>(actual: Observable<T>, expected: Observable<T>): void;
    equal<T = any>(actual: Observable<T>, expected: string, values?: {
        [key: string]: T;
    }, error?: any): void;
    equal<T = any>(actual: Observable<T>, unsubscription: string, expected: Observable<T>): void;
    equal<T = any>(actual: Observable<T>, unsubscription: string, expected: string, values?: {
        [key: string]: T;
    }, error?: any): void;
    expect<T = any>(actual: Observable<T>, unsubscription?: string): Expect<T>;
    flush(): void;
    has<T = any>(actual: Observable<T>, expected: string | string[]): void;
    hot<T = any>(marbles: string, values?: {
        [key: string]: T;
    }, error?: any): HotObservable<T>;
    teardown(): void;
    time(marbles: string): number;
}
